// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: implant.proto

package implant

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CommandData struct {
	DataType  uint64 `protobuf:"varint,1,opt,name=DataType,proto3" json:"DataType,omitempty"`
	TimeStamp string `protobuf:"bytes,2,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	Data      []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *CommandData) Reset()         { *m = CommandData{} }
func (m *CommandData) String() string { return proto.CompactTextString(m) }
func (*CommandData) ProtoMessage()    {}
func (*CommandData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9a24761cea32b5c, []int{0}
}
func (m *CommandData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandData.Merge(m, src)
}
func (m *CommandData) XXX_Size() int {
	return m.Size()
}
func (m *CommandData) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandData.DiscardUnknown(m)
}

var xxx_messageInfo_CommandData proto.InternalMessageInfo

func (m *CommandData) GetDataType() uint64 {
	if m != nil {
		return m.DataType
	}
	return 0
}

func (m *CommandData) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

func (m *CommandData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type FirstConnection struct {
	PublicKey       []byte `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	SessionId       string `protobuf:"bytes,2,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
	Verify          []byte `protobuf:"bytes,3,opt,name=Verify,proto3" json:"Verify,omitempty"`
	PublicKeyVerify []byte `protobuf:"bytes,4,opt,name=PublicKeyVerify,proto3" json:"PublicKeyVerify,omitempty"`
}

func (m *FirstConnection) Reset()         { *m = FirstConnection{} }
func (m *FirstConnection) String() string { return proto.CompactTextString(m) }
func (*FirstConnection) ProtoMessage()    {}
func (*FirstConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9a24761cea32b5c, []int{1}
}
func (m *FirstConnection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirstConnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirstConnection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirstConnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirstConnection.Merge(m, src)
}
func (m *FirstConnection) XXX_Size() int {
	return m.Size()
}
func (m *FirstConnection) XXX_DiscardUnknown() {
	xxx_messageInfo_FirstConnection.DiscardUnknown(m)
}

var xxx_messageInfo_FirstConnection proto.InternalMessageInfo

func (m *FirstConnection) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *FirstConnection) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *FirstConnection) GetVerify() []byte {
	if m != nil {
		return m.Verify
	}
	return nil
}

func (m *FirstConnection) GetPublicKeyVerify() []byte {
	if m != nil {
		return m.PublicKeyVerify
	}
	return nil
}

func init() {
	proto.RegisterType((*CommandData)(nil), "implant.CommandData")
	proto.RegisterType((*FirstConnection)(nil), "implant.FirstConnection")
}

func init() { proto.RegisterFile("implant.proto", fileDescriptor_a9a24761cea32b5c) }

var fileDescriptor_a9a24761cea32b5c = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0xcc, 0x2d, 0xc8,
	0x49, 0xcc, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xa2, 0xb9,
	0xb8, 0x9d, 0xf3, 0x73, 0x73, 0x13, 0xf3, 0x52, 0x5c, 0x12, 0x4b, 0x12, 0x85, 0xa4, 0xb8, 0x38,
	0x40, 0x74, 0x48, 0x65, 0x41, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4b, 0x10, 0x9c, 0x2f, 0x24,
	0xc3, 0xc5, 0x19, 0x92, 0x99, 0x9b, 0x1a, 0x5c, 0x92, 0x98, 0x5b, 0x20, 0xc1, 0xa4, 0xc0, 0xa8,
	0xc1, 0x19, 0x84, 0x10, 0x10, 0x12, 0xe2, 0x62, 0x01, 0xa9, 0x94, 0x60, 0x56, 0x60, 0xd4, 0xe0,
	0x09, 0x02, 0xb3, 0x95, 0xfa, 0x19, 0xb9, 0xf8, 0xdd, 0x32, 0x8b, 0x8a, 0x4b, 0x9c, 0xf3, 0xf3,
	0xf2, 0x52, 0x93, 0x4b, 0x32, 0xf3, 0xf3, 0x40, 0xa6, 0x04, 0x94, 0x26, 0xe5, 0x64, 0x26, 0x7b,
	0xa7, 0x56, 0x82, 0xad, 0xe0, 0x09, 0x42, 0x08, 0x80, 0x64, 0x83, 0x53, 0x8b, 0x8b, 0x33, 0xf3,
	0xf3, 0x3c, 0x53, 0x60, 0x76, 0xc0, 0x05, 0x84, 0xc4, 0xb8, 0xd8, 0xc2, 0x52, 0x8b, 0x32, 0xd3,
	0x2a, 0xa1, 0xb6, 0x40, 0x79, 0x42, 0x1a, 0x5c, 0xfc, 0x70, 0x23, 0xa0, 0x0a, 0x58, 0xc0, 0x0a,
	0xd0, 0x85, 0x9d, 0x24, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39,
	0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x89, 0x0d,
	0x1c, 0x30, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x86, 0x1b, 0x10, 0x29, 0x01, 0x00,
	0x00,
}

func (m *CommandData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintImplant(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TimeStamp) > 0 {
		i -= len(m.TimeStamp)
		copy(dAtA[i:], m.TimeStamp)
		i = encodeVarintImplant(dAtA, i, uint64(len(m.TimeStamp)))
		i--
		dAtA[i] = 0x12
	}
	if m.DataType != 0 {
		i = encodeVarintImplant(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FirstConnection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirstConnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FirstConnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKeyVerify) > 0 {
		i -= len(m.PublicKeyVerify)
		copy(dAtA[i:], m.PublicKeyVerify)
		i = encodeVarintImplant(dAtA, i, uint64(len(m.PublicKeyVerify)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Verify) > 0 {
		i -= len(m.Verify)
		copy(dAtA[i:], m.Verify)
		i = encodeVarintImplant(dAtA, i, uint64(len(m.Verify)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintImplant(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintImplant(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintImplant(dAtA []byte, offset int, v uint64) int {
	offset -= sovImplant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommandData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataType != 0 {
		n += 1 + sovImplant(uint64(m.DataType))
	}
	l = len(m.TimeStamp)
	if l > 0 {
		n += 1 + l + sovImplant(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovImplant(uint64(l))
	}
	return n
}

func (m *FirstConnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovImplant(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovImplant(uint64(l))
	}
	l = len(m.Verify)
	if l > 0 {
		n += 1 + l + sovImplant(uint64(l))
	}
	l = len(m.PublicKeyVerify)
	if l > 0 {
		n += 1 + l + sovImplant(uint64(l))
	}
	return n
}

func sovImplant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImplant(x uint64) (n int) {
	return sovImplant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommandData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImplant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImplant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImplant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImplant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImplant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeStamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImplant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImplant
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImplant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImplant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImplant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirstConnection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImplant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirstConnection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirstConnection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImplant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImplant
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImplant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImplant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImplant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImplant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verify", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImplant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImplant
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImplant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verify = append(m.Verify[:0], dAtA[iNdEx:postIndex]...)
			if m.Verify == nil {
				m.Verify = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyVerify", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImplant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImplant
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImplant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeyVerify = append(m.PublicKeyVerify[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKeyVerify == nil {
				m.PublicKeyVerify = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImplant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImplant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImplant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImplant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImplant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImplant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImplant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImplant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImplant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImplant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImplant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImplant = fmt.Errorf("proto: unexpected end of group")
)
